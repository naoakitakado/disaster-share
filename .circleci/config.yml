version: 2
jobs:
  build: # テストを行うworkflow
    docker:
      - image: circleci/php:7.2.15-fpm
      - image: circleci/mysql:5.7
        command: mysqld --default-authentication-plugin=mysql_native_password
        envirionment: # MySQLの初期設定
          - APP_DEBUG: true
          - APP_ENV: circle
          - DB_CONNECTION: mysql
          - MYSQL_ALLOW_EMPTY_PASSWORD: true

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: test_setup # テストを行うために必要なライブラリなどのインストール
          command: |
            sudo apt-get update && sudo apt-get install -y libpng-dev libjpeg-dev |
            sudo docker-php-ext-configure gd --with-png-dir=/usr/include --with-jpeg-dir=/usr/include |
            sudo docker-php-ext-install pdo_mysql gd

      - restore_cache: # composer.jsonのキャッシュがあれば利用
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
          - v1-dependencies-

      - run:
          name: composer install
          command: composer install -n --prefer-dist

      - save_cache: # composer.jsonをキャッシュ
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      - run:
          name: migration
          command: php artisan migrate --env=circle --seed

      - run: # envファイルをcircleci用のものに変更
          name: env_copy
          command: rm .env.testing && ln -s .env.circle .env.testing

      - run:
          name: test_run
          command: ./vendor/bin/phpunit --testdox

  build_image:
    docker:
      - image: circleci/php:7.3.9-fpm

    working_directory: ~/repo

    steps:
      - checkout:

      - run:
          name: setup Laravel # envをproduction用のものに変更&権限設定
          command: |
            ln -s .env.production .env
            sudo chmod -R 777 storage bootstrap/cache

      - run:
          name: composer install
          command: composer install -n --prefer-dist

      - run: # configファイルをキャッシュ
          name: create config cache
          command: php artisan config:cache

      - run:
          name: build container # PHPコンテナをビルド
          command: |
            docker build -t ${AWS_ECR_DOMAIN_APP}:$CIRCLE_SHA1 -t ${AWS_ECR_DOMAIN_APP}:latest --build-arg TZ=${TZ} -f ./docker/php/Dockerfile .
            docker build -t ${AWS_ECR_DOMAIN_WEB}:$CIRCLE_SHA1 -t ${AWS_ECR_DOMAIN_WEB}:latest --build-arg TZ=${TZ} -f ./docker/web/Dockerfile .
      - run:
          name: install aws cli # コマンドラインからAWSを操作するためにaws-cliをインストール
          command: |
            curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"
            sudo python get-pip.py
            sudo pip install awscli

      - run:
          name: push docker image # ECRにコンテナイメージをpush
          command: |
            $(aws ecr get-login --no-include-email --region ap-northeast-1)
            docker push ${AWS_ECR_DOMAIN_APP}:$CIRCLE_SHA1
            docker push ${AWS_ECR_DOMAIN_APP}:latest
            docker push ${AWS_ECR_DOMAIN_WEB}:$CIRCLE_SHA1
            docker push ${AWS_ECR_DOMAIN_WEB}:latest

  deploy:
    docker:
      - image: circleci/python:3.7
    steps:
      - run:
          name: install aws cli
          command: sudo pip install awscli

      - run:
          name: download jq # JSONファイルを簡単に操作するためにjqをインストール
          command: |
            wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
            mv jq-linux64 jq

      - run:
          name: login ecr
          command: $(aws ecr get-login --no-include-email --region ap-northeast-1)

      - run:
          name: deploy # 新しいタスク定義ファイルを作成し、ECSに反映させる
          command: |
            aws ecs describe-task-definition --task-definition ${AWS_ECS_TASK_NAME} | jq '.taskDefinition | { containerDefinitions: .containerDefinitions }' > task_definition.json
            aws ecs register-task-definition --family ${AWS_ECS_TASK_NAME} --cli-input-json file://task_definition.json
            aws ecs update-service --cluster ${AWS_ECS_CLUSTER_NAME} --service ${AWS_ECS_SERVICE_NAME} --task-definition ${AWS_ECS_TASK_NAME}

      - run:
          name: migration # マイグレーションタスクを実行
          command: aws ecs run-task --cluster ${AWS_ECS_CLUSTER_NAME} --task-definition sample-app-migrate
workflows:
  version: 2
  test:
    jobs:
      - build
      - build_image:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - build_image
          filters:
            branches:
              only: master